# -*- coding: utf-8 -*-
"""test.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nCt0wpbcZhKjiXD5cekoMGUwPT4T43_U
"""

pip install transformers

pip install streamlit pandas

from google.colab import files
import pandas as pd

# Upload the file
uploaded = files.upload()

# Load the uploaded file into a DataFrame
for file_name in uploaded.keys():
    print(f"Uploaded file: {file_name}")
    data = pd.read_csv(file_name)  # Assuming it's a CSV
    print("Data Preview:")
    print(data.head())

import streamlit as st
import pandas as pd
from transformers import pipeline

# --- Load Hugging Face QA Model ---
@st.cache_resource
def load_model():
    return pipeline("question-answering", model="distilbert-base-cased-distilled-squad")

qa_model = load_model()

# --- Load Data ---
@st.cache_data
def load_data():
    data = pd.read_csv("Combined_Financial_Data.csv")
    context = "\n".join(data.apply(lambda row: f"{row['Category']}: {row['Amount']}", axis=1))
    return data, context

data, context = load_data()

# --- App Layout ---
st.set_page_config(page_title="AI Policy Impact Analyzer", page_icon="ü§ñ", layout="wide")
st.title("ü§ñ AI-Powered Policy Impact Analyzer")
st.write("""
Welcome to the **AI-Powered Policy Impact Analyzer**.
Ask any **natural language question** about expenditures, taxes, or budgets, and our AI will provide data-driven insights.
""")

st.divider()

# --- User Query Section ---
st.header("üîç Ask Your Policy Question")
user_question = st.text_input("Enter your question:", placeholder="e.g., 'What is the expenditure on Defence?'")

# --- Display Results ---
if user_question:
    st.subheader("üí° Results")
    try:
        # Generate answer using Hugging Face model
        answer = qa_model(question=user_question, context=context)

        # Display the result
        if answer['score'] > 0.1:  # Confidence threshold
            st.success(f"**Answer:** {answer['answer']}")
            st.write(f"**Confidence Score:** {answer['score']:.2f}")
        else:
            st.warning("Sorry, I couldn't find a confident answer. Please rephrase the question.")

        # Display full data table for reference
        st.write("### Related Data")
        st.dataframe(data)

    except Exception as e:
        st.error("Error processing your request. Please try again.")
        st.error(str(e))

st.divider()
st.write("**Developed with ‚ù§Ô∏è using Streamlit and Hugging Face Transformers**")